{"version":3,"sources":["assets/images/loading.gif","routes/routes.js","Components/LoadingIndicator/LoadingIndicator.js","Components/Books/BookList.js","Components/Books/BookSearch.js","Components/Cart/CartIcon.js","Pages/Books/Books.js","Constants/ServerUrl.js","Services/fetchData.js","Components/Cart/CartComponent.js","Pages/Cart.js/Cart.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","routes","books","cart","login","LoadingIndicator","src","require","alt","React","Component","BookList","id","title","author","year","totalBooks","availability","image","book","handleAddToCart","handleRemoveFromCart","availableDate","Card","disabled","CardImg","CardBody","CardSubtitle","CardText","Badge","pill","variant","className","find","x","onClick","bind","BookSearch","searchType","placeholderText","onChange","btnType","console","log","type","placeholder","aria-label","useStyles","makeStyles","theme","root","display","flexDirection","formControl","margin","spacing","row","justifyContent","CartIcon","classes","to","pathname","color","length","max","badgeContent","showZero","icon","faShoppingBag","size","Books","state","SearchBook","e","props","handleSearch","handleSubmit","preventDefault","this","bookList","map","bookIndex","index","noOfBooks","yearOfPublication","PRIMARY_SERVER","GET_BOOKS","GET_USERS","fetchData","route","requestUrl","Promise","resolve","reject","fetch","then","response","json","data","catch","error","CartComponent","modal","backToBookPage","toggle","backdrop","keyboard","handleCheckOut","Modal","isOpen","ModalBody","cartIter","cartIndex","Button","ModalFooter","Alert","ModalHeader","Cart","setState","prevState","App","setBookList","users","bookNextAvailability","loadUsersData","a","loadPostData","target","value","currentBookList","newBookList","filter","item","toLowerCase","searchedItem","includes","genre","toString","cartItem","alert","filteredCart","filteredBooks","todayDate","Date","setDate","getDate","predictedAvailaibility","getMonth","getFullYear","history","location","push","Navbar","light","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","NavItem","NavLink","path","render","withRouter","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f4f9add3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.81c29bc5.gif\";","const routes = {\n  books: \"/book\",\n  cart: \"/cart\",\n  login: \"/login\"\n};\n\nexport default routes;\n","import React from \"react\";\n\nclass LoadingIndicator extends React.Component {\n  render() {\n    return (\n      <div>\n        <img src={require(\"../../assets/images/loading.gif\")} alt={\"loading\"} />\n      </div>\n    );\n  }\n}\n\nexport default LoadingIndicator;\n","import React, { Component } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faMinus } from \"@fortawesome/free-solid-svg-icons\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport RemoveRoundedIcon from \"@material-ui/icons/RemoveRounded\";\nimport Badge from \"react-bootstrap/Badge\";\n\nimport {\n  Card,\n  CardImg,\n  CardText,\n  CardBody,\n  CardTitle,\n  CardSubtitle,\n  Button\n} from \"reactstrap\";\n\nconst BookList = ({\n  id,\n  title,\n  author,\n  totalBooks,\n  year,\n  availability,\n  image,\n  book,\n  handleAddToCart,\n  handleRemoveFromCart,\n  cart,\n  availableDate\n}) => {\n  debugger;\n  return (\n    <Card id={id} disabled={availability == \"no\"}>\n      <CardImg src={image} alt={\"loading\"} />\n      <CardBody>\n        <h3>{title}</h3>\n        <CardSubtitle>Author : {author}</CardSubtitle>\n        <CardSubtitle>Year : {year}</CardSubtitle>\n        <CardText>\n          <strong>\n            {availability == \"yes\" ? (\n              <Badge pill variant=\"success\" className=\"badge-size\">\n                {`Available`}\n              </Badge>\n            ) : (\n              <Badge pill variant=\"danger\">\n                Unavailable\n              </Badge>\n            )}\n            {availability == \"no\" ? (\n              <Badge pill variant=\"danger\" className=\"badge-size\">\n                {`Available on : ${availableDate}`}\n              </Badge>\n            ) : (\n              \"\"\n            )}\n          </strong>\n        </CardText>\n        {/* <CardText>\n          In Stock : <strong>{totalBooks}</strong>\n        </CardText> */}\n\n        {cart.find(x => x.id === id) ? (\n          <button\n            className=\"btn btn-danger\"\n            onClick={handleRemoveFromCart.bind(this, book)}\n          >\n            <RemoveRoundedIcon />\n            Remove from cart\n          </button>\n        ) : (\n          <button\n            disabled={availability == \"no\"}\n            className=\"btn btn-primary\"\n            onClick={handleAddToCart.bind(this, book)}\n          >\n            <AddIcon />\n            Add to cart\n          </button>\n        )}\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default BookList;\n","import React, { Component } from \"react\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\n\nconst BookSearch = ({\n  searchType,\n  placeholderText,\n  onChange,\n  btnType,\n  onClick\n}) => {\n  console.log();\n  return (\n    <div className=\"container\">\n      <input\n        className=\"form-control\"\n        type={searchType}\n        placeholder={placeholderText}\n        aria-label=\"Search\"\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\nexport default BookSearch;\n","import React from \"react\";\nimport { faShoppingBag } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Badge from \"@material-ui/core/Badge\";\nimport { NavLink, Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport routes from \"../../routes/routes\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  formControl: {\n    margin: theme.spacing(3)\n  },\n  row: {\n    display: \"flex\",\n    justifyContent: \"center\"\n  },\n  margin: {\n    margin: theme.spacing(2)\n  }\n}));\n\nconst CartIcon = ({ cart, handleRemoveFromCart }) => {\n  debugger;\n  const classes = useStyles();\n  return (\n    <Link to={{ pathname: \"/cart\" }}>\n      <Badge\n        color={cart.length > 0 ? \"secondary\" : \"primary\"}\n        max={10}\n        badgeContent={cart.length}\n        showZero\n        className={classes.margin}\n      >\n        <FontAwesomeIcon icon={faShoppingBag} size=\"3x\"></FontAwesomeIcon>\n      </Badge>\n    </Link>\n  );\n};\n\nCartIcon.propTypes = {\n  cart: PropTypes.array.isRequired\n};\n\nexport default CartIcon;\n","import React, { Component, Fragment } from \"react\";\nimport LoadingIndicator from \"../../Components/LoadingIndicator/LoadingIndicator\";\n//import data from \"../../data/bookdetails\";\nimport BookList from \"../../Components/Books/BookList\";\nimport BookSearch from \"../../Components/Books/BookSearch\";\nimport CartIcon from \"../../Components/Cart/CartIcon\";\n\nclass Books extends Component {\n  state = {};\n\n  SearchBook = e => {\n    debugger;\n    this.props.handleSearch(e);\n  };\n\n  handleSubmit = e => {\n    debugger;\n    e.preventDefault();\n  };\n\n  render() {\n    const {\n      bookList,\n      cart,\n      handleRemoveFromCart,\n      handleAddToCart,\n      handleSearch,\n      availableDate\n    } = this.props;\n    debugger;\n    return (\n      <Fragment>\n        <BookSearch\n          className=\"container\"\n          searchType=\"search\"\n          placeholderText=\"Search for Books\"\n          onChange={this.SearchBook}\n          btnType=\"submit\"\n          onClick={this.handleSubmit}\n        />\n        <h3>List of Books</h3>\n\n        {bookList.length ? (\n          <div className=\"container box\">\n            {bookList.map((book, bookIndex) => {\n              return (\n                <BookList\n                  id={book.id}\n                  index={bookIndex}\n                  title={book.title}\n                  totalBooks={book.noOfBooks}\n                  author={book.author}\n                  year={book.yearOfPublication}\n                  availability={book.availability}\n                  image={book.image}\n                  book={book}\n                  cart={cart}\n                  handleAddToCart={handleAddToCart}\n                  handleRemoveFromCart={handleRemoveFromCart}\n                  availableDate={availableDate}\n                />\n              );\n            })}\n          </div>\n        ) : bookList.length == 0 ? (\n          <p>{\"No books available in the given name\"}</p>\n        ) : (\n          <LoadingIndicator />\n        )}\n      </Fragment>\n    );\n  }\n}\n\nexport default Books;\n","export const PRIMARY_SERVER =\n  \"https://my-json-server.typicode.com/gsprasanna/json-server\";\n\nexport const GET_BOOKS = \"/data\";\n\nexport const POST_BOOKS = \"/data\";\n\nexport const GET_USERS = \"/users\";\n","import { PRIMARY_SERVER } from \"../Constants/ServerUrl\";\n\nconst fetchData = route => {\n  const requestUrl = PRIMARY_SERVER + route;\n\n  return new Promise((resolve, reject) => {\n    fetch(requestUrl)\n      .then(response => response.json())\n      .then(data => {\n        resolve(data);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  });\n};\n\nexport const updateBooks = (route, method, body) => {\n  const requestUrl = PRIMARY_SERVER + route;\n\n  const headers = new Headers({\n    \"Content-Type\": \"application/json\"\n  });\n\n  const requestConfig = {\n    mode: \"cors\",\n    method,\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  return new Promise((resolve, reject) => {\n    fetch(requestUrl, requestConfig)\n      .then(response => response.json())\n      .then(data => {\n        resolve(data);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  });\n};\n\nexport default fetchData;\n","import React from \"react\";\n\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport LoadingIndicator from \"../LoadingIndicator/LoadingIndicator\";\nimport RemoveRoundedIcon from \"@material-ui/icons/RemoveRounded\";\nimport { NavLink } from \"react-router-dom\";\nimport routes from \"../../routes/routes\";\nimport { Alert } from \"reactstrap\";\n\nconst CartComponent = ({\n  cart,\n  handleRemoveFromCart,\n  backToBookPage,\n  modal,\n  toggle,\n  backdrop,\n  keyboard,\n  handleCheckOut\n}) => {\n  debugger;\n  return (\n    <div>\n      {cart.length ? (\n        <Modal\n          isOpen={modal}\n          toggle={toggle}\n          id={cart.id}\n          backdrop={backdrop}\n          size=\"lg\"\n          keyboard={keyboard}\n        >\n          <ModalBody>\n            <table>\n              <tr>\n                <td></td>\n                <td>\n                  <strong>Book Title</strong>\n                </td>\n                <td>\n                  <strong>Author</strong>\n                </td>\n                <td>\n                  <strong>Published Year</strong>\n                </td>\n              </tr>\n              {cart.map((cartIter, cartIndex) => {\n                return (\n                  <tr>\n                    <td>\n                      <img\n                        className=\"thumbnail\"\n                        src={cartIter.image}\n                        alt={\"loading\"}\n                      />\n                    </td>\n                    <td>\n                      <strong>{cartIter.title}</strong>\n                    </td>\n                    <td>\n                      <p>{cartIter.author}</p>\n                    </td>\n                    <td>\n                      <p>{cartIter.yearOfPublication}</p>\n                    </td>\n                    <td>\n                      <Button\n                        className=\"btn btn-danger\"\n                        onClick={handleRemoveFromCart.bind(\n                          this,\n                          cartIter,\n                          cart\n                        )}\n                      >\n                        <RemoveRoundedIcon />\n                      </Button>\n                    </td>\n                  </tr>\n                );\n              })}\n            </table>\n          </ModalBody>\n          <ModalFooter>\n            <NavLink to={routes.books}>\n              <Button color=\"primary\" onClick={handleCheckOut.bind(this, cart)}>\n                Check out\n              </Button>\n            </NavLink>\n\n            <NavLink to={routes.books}>\n              <Button color=\"secondary\">Cancel</Button>\n            </NavLink>\n          </ModalFooter>\n          <ModalFooter>\n            {cart.length == 3 ? (\n              <Alert color=\"danger\">\n                You have added the maximum number of books to the cart!\n              </Alert>\n            ) : (\n              <Alert color=\"primary\">\n                still you can add {3 - cart.length} books\n              </Alert>\n            )}\n          </ModalFooter>\n        </Modal>\n      ) : (\n        <Modal\n          isOpen={modal}\n          toggle={toggle}\n          id={cart.id}\n          backdrop={backdrop}\n          keyboard={keyboard}\n        >\n          <ModalHeader>Hi Buddy!</ModalHeader>\n          <ModalBody>Please Add the books to the cart!</ModalBody>\n          <ModalFooter>\n            <NavLink to={routes.books}>\n              <Button color=\"secondary\">Cancel</Button>\n            </NavLink>\n          </ModalFooter>\n        </Modal>\n      )}\n    </div>\n  );\n};\n\nexport default CartComponent;\n","import React, { Component } from \"react\";\nimport CartComponent from \"../../Components/Cart/CartComponent\";\n\nclass Cart extends Component {\n  state = {\n    cart: [],\n    modal: true,\n    backdrop: \"static\",\n    keyboard: false\n  };\n  componentDidMount() {\n    this.setState({\n      cart: this.props.cart\n    });\n  }\n  toggle = () => {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  };\n  // handleRemoveFromCart = book => {\n  //   debugger;\n  //   const { cart } = this.state;\n  //   const filteredCart = cart.filter(x => x.id !== book.id);\n  //   book.noOfBooks = ++book.noOfBooks;\n  //   this.setState({\n  //     cart: filteredCart\n  //   });\n  //   debugger;\n  // };\n  backToBookPage = () => {\n    debugger;\n    let path = \"/book\";\n    // this.props.history.push(path);\n  };\n\n  render() {\n    debugger;\n    const { modal, backdrop, keyboard } = this.state;\n    return (\n      <CartComponent\n        cart={this.props.cart}\n        modal={modal}\n        toggle={this.toggle}\n        keyboard={keyboard}\n        handleRemoveFromCart={this.props.handleRemoveFromCart}\n        backToBookPage={this.backToBookPage}\n        backdrop={backdrop}\n        handleCheckOut={this.props.handleCheckOut}\n      />\n    );\n  }\n}\n\nexport default Cart;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Route, withRouter } from \"react-router-dom\";\nimport routes from \"./routes/routes\";\nimport Books from \"./Pages/Books/Books\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\";\nimport CartIcon from \"./Components/Cart/CartIcon\";\nimport fetchData, { updateBooks } from \"./Services/fetchData\";\n\nimport { GET_BOOKS, POST_BOOKS, GET_USERS } from \"./Constants/ServerUrl\";\nimport Cart from \"./Pages/Cart.js/Cart\";\n\nclass App extends Component {\n  state = {\n    bookList: [],\n    setBookList: [],\n    cart: [],\n    isOpen: false,\n    users: [],\n    bookNextAvailability: \"\"\n  };\n\n  componentDidMount() {\n    debugger;\n    this.loadPostData();\n    this.loadUsersData();\n    const { history, location } = this.props;\n    if (location.pathname === \"/Library-app-using-react\") {\n      history.push(routes.books);\n    }\n  }\n\n  loadUsersData = async () => {\n    try {\n      const users = await fetchData(GET_USERS, \"GET\");\n      console.log(users);\n      this.setState({ users });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  loadPostData = async () => {\n    try {\n      const bookList = await fetchData(GET_BOOKS, \"GET\");\n      console.log(bookList);\n      this.setState({ bookList, setBookList: bookList });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  toggle = () => {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  };\n  handleSearch = e => {\n    debugger;\n    console.log(e.target.value);\n    let currentBookList = [...this.state.bookList];\n    let newBookList = [];\n    if (e.target.value !== \"\") {\n      newBookList = currentBookList.filter(item => {\n        debugger;\n        const lc = item.title.toLowerCase();\n        const searchedItem = e.target.value;\n\n        return (\n          item.title.toLowerCase().includes(searchedItem.toLowerCase()) ||\n          item.author.toLowerCase().includes(searchedItem.toLowerCase()) ||\n          item.genre.toLowerCase().includes(searchedItem.toLowerCase()) ||\n          item.yearOfPublication.toString().includes(searchedItem.toString())\n        );\n      });\n    } else {\n      newBookList = this.state.setBookList;\n    }\n    this.setState({\n      bookList: newBookList\n    });\n    debugger;\n  };\n\n  handleAddToCart = book => {\n    debugger;\n    const { cart } = this.state;\n    const cartItem = cart.find(x => x.id === book.id);\n    cart.length < 3\n      ? !cartItem && book.noOfBooks > 0\n        ? (book.noOfBooks = book.noOfBooks - 1) &&\n          this.setState({ cart: [...this.state.cart, book] })\n        : (book.noOfBooks = \"Stock not available\")\n      : alert(\"you reached the maximum number of books added to the cart!\");\n    debugger;\n  };\n\n  handleRemoveFromCart = book => {\n    debugger;\n    const { cart } = this.state;\n    const filteredCart = cart.filter(x => x.id !== book.id);\n    book.noOfBooks = ++book.noOfBooks;\n    this.setState({\n      cart: filteredCart\n    });\n    debugger;\n  };\n\n  handleCheckOut = books => {\n    const { bookList } = this.state;\n    debugger;\n    let filteredBooks = [];\n    for (let book in books) {\n      debugger;\n      filteredBooks = bookList.filter(x =>\n        x.id === books[book].id ? (x.availability = \"no\") : x.availability\n      );\n    }\n\n    let todayDate = new Date();\n    let numberOfDaysToAdd = 5;\n    todayDate.setDate(todayDate.getDate() + numberOfDaysToAdd);\n    let dd = todayDate.getDate();\n    let mm = todayDate.getMonth();\n    let y = todayDate.getFullYear();\n\n    let predictedAvailaibility = dd + \"/\" + mm + \"/\" + y;\n    debugger;\n    this.setState({\n      bookList: filteredBooks,\n      cart: [],\n      bookNextAvailability: predictedAvailaibility\n    });\n    debugger;\n\n    // const requestBody = {\n    //   books: books\n    // };\n    // try {\n    //   const bookList = await updateBooks(POST_BOOKS, \"POST\", requestBody);\n    //   console.log(bookList);\n    //   this.setState({ bookList, setBookList: bookList });\n    // } catch (e) {\n    //   console.error(e);\n    // }\n  };\n\n  render() {\n    const { cart, bookList, isOpen, bookNextAvailability } = this.state;\n    debugger;\n    return (\n      <div className=\"App\">\n        <Navbar color=\"light\" light expand=\"md\">\n          <NavbarBrand href=\"/\">Smart Library</NavbarBrand>\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n              <NavItem>\n                <NavLink to={routes.cart}></NavLink>\n              </NavItem>\n              <NavItem>\n                <CartIcon\n                  cart={cart}\n                  handleRemoveFromCart={this.handleRemoveFromCart}\n                >\n                  Cart\n                </CartIcon>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n        <Route\n          path={routes.cart}\n          render={() => (\n            <Cart\n              cart={cart}\n              handleRemoveFromCart={this.handleRemoveFromCart}\n              handleCheckOut={this.handleCheckOut}\n            />\n          )}\n        />\n        <Route\n          path={routes.books}\n          render={() => (\n            <Books\n              bookList={bookList}\n              cart={cart}\n              handleAddToCart={this.handleAddToCart}\n              handleRemoveFromCart={this.handleRemoveFromCart}\n              handleSearch={this.handleSearch}\n              availableDate={bookNextAvailability}\n            />\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}